{"map":"{\"version\":3,\"sources\":[\"/Users/alexandrmakarevych/Developer/DataRoots/AlexNet_Project/client/src/App.js\",\"/Users/alexandrmakarevych/Developer/DataRoots/AlexNet_Project/client/src/serviceWorker.js\",\"/Users/alexandrmakarevych/Developer/DataRoots/AlexNet_Project/client/src/index.js\"],\"names\":[\"SimpleReactFileUpload\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"file\",\"onFormSubmit\",\"bind\",\"assertThisInitialized\",\"onChange\",\"fileUpload\",\"e\",\"preventDefault\",\"then\",\"response\",\"console\",\"log\",\"data\",\"setState\",\"target\",\"files\",\"formData\",\"FormData\",\"append\",\"post\",\"headers\",\"content-type\",\"react_default\",\"a\",\"createElement\",\"onSubmit\",\"type\",\"React\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"6PAgDeA,cA3CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAO,CACRC,KAAK,MAETR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,SAAWZ,EAAKY,SAASF,KAAdT,OAAAU,EAAA,EAAAV,CAAAD,IAChBA,EAAKa,WAAab,EAAKa,WAAWH,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAPHA,4EASNc,GACTA,EAAEC,iBACFZ,KAAKU,WAAWV,KAAKI,MAAMC,MAAMQ,KAAK,SAACC,GACnCC,QAAQC,IAAIF,EAASG,yCAGpBN,GACLX,KAAKkB,SAAS,CAACb,KAAKM,EAAEQ,OAAOC,MAAM,wCAE5Bf,GACP,IACMgB,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAOlB,GAMvB,OAAQmB,OAAAA,EAAAA,KAAAA,CARI,iCAQMH,EALH,CACXI,QAAS,CACLC,eAAgB,0DAOxB,OACIC,EAAAC,EAAAC,cAAA,OAAA,CAAMC,SAAU9B,KAAKM,cACjBqB,EAAAC,EAAAC,cAAA,KAAA,KAAA,eACAF,EAAAC,EAAAC,cAAA,QAAA,CAAOE,KAAK,OAAOtB,SAAUT,KAAKS,WAClCkB,EAAAC,EAAAC,cAAA,SAAA,CAAQE,KAAK,UAAb,kBArCoBC,EAAAA,EAAMC,WCStBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAA2BC,SAASC,eAAe,SD2H7D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react'\\nimport axios, { post } from 'axios';\\n\\nclass SimpleReactFileUpload extends React.Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state ={\\n            file:null\\n        }\\n        this.onFormSubmit = this.onFormSubmit.bind(this)\\n        this.onChange = this.onChange.bind(this)\\n        this.fileUpload = this.fileUpload.bind(this)\\n    }\\n    onFormSubmit(e){\\n        e.preventDefault() // Stop form submit\\n        this.fileUpload(this.state.file).then((response)=>{\\n            console.log(response.data);\\n        })\\n    }\\n    onChange(e) {\\n        this.setState({file:e.target.files[0]})\\n    }\\n    fileUpload(file){\\n        const url = 'http://example.com/file-upload';\\n        const formData = new FormData();\\n        formData.append('file',file)\\n        const config = {\\n            headers: {\\n                'content-type': 'multipart/form-data'\\n            }\\n        }\\n        return  post(url, formData,config)\\n    }\\n\\n    render() {\\n        return (\\n            <form onSubmit={this.onFormSubmit}>\\n                <h1>File Upload</h1>\\n                <input type=\\\"file\\\" onChange={this.onChange} />\\n                <button type=\\\"submit\\\">Upload</button>\\n            </form>\\n        )\\n    }\\n}\\n\\n\\n\\nexport default SimpleReactFileUpload\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport SimpleReactFileUpload from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<SimpleReactFileUpload />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{19:function(e,t,n){e.exports=n(43)},25:function(e,t,n){},43:function(e,t,n){\"use strict\";n.r(t);var o=n(1),a=n.n(o),i=n(12),l=n.n(i),r=(n(25),n(13)),c=n(14),u=n(17),s=n(15),m=n(2),f=n(18),p=n(16),d=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(u.a)(this,Object(s.a)(t).call(this,e))).state={file:null},n.onFormSubmit=n.onFormSubmit.bind(Object(m.a)(n)),n.onChange=n.onChange.bind(Object(m.a)(n)),n.fileUpload=n.fileUpload.bind(Object(m.a)(n)),n}return Object(f.a)(t,e),Object(c.a)(t,[{key:\"onFormSubmit\",value:function(e){e.preventDefault(),this.fileUpload(this.state.file).then(function(e){console.log(e.data)})}},{key:\"onChange\",value:function(e){this.setState({file:e.target.files[0]})}},{key:\"fileUpload\",value:function(e){var t=new FormData;t.append(\"file\",e);return Object(p.post)(\"http://example.com/file-upload\",t,{headers:{\"content-type\":\"multipart/form-data\"}})}},{key:\"render\",value:function(){return a.a.createElement(\"form\",{onSubmit:this.onFormSubmit},a.a.createElement(\"h1\",null,\"File Upload\"),a.a.createElement(\"input\",{type:\"file\",onChange:this.onChange}),a.a.createElement(\"button\",{type:\"submit\"},\"Upload\"))}}]),t}(a.a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(a.a.createElement(d,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[19,1,2]]]);","extractedComments":[]}