{"map":"{\"version\":3,\"sources\":[\"/Users/alexandrmakarevych/Developer/DataRoots/AlexNet_Project/client/src/App.js\",\"/Users/alexandrmakarevych/Developer/DataRoots/AlexNet_Project/client/src/serviceWorker.js\",\"/Users/alexandrmakarevych/Developer/DataRoots/AlexNet_Project/client/src/index.js\"],\"names\":[\"SimpleReactFileUpload\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"file\",\"message\",\"shouldShowFirst\",\"shouldShowSecond\",\"onFormSubmit\",\"bind\",\"assertThisInitialized\",\"onChange\",\"fileUpload\",\"firstProjectOnClick\",\"secondProjectOnClick\",\"onTextareaChange\",\"reviewUpload\",\"onSecondFormSubmit\",\"e\",\"_this2\",\"console\",\"log\",\"preventDefault\",\"then\",\"response\",\"data\",\"setState\",\"label\",\"target\",\"files\",\"_this3\",\"review\",\"prob\",\"formData\",\"FormData\",\"append\",\"post\",\"value\",\"headers\",\"content-type\",\"react_default\",\"a\",\"createElement\",\"align\",\"Button_default\",\"variant\",\"onClick\",\"onSubmit\",\"type\",\"rows\",\"cols\",\"parseFloat\",\"React\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react'\\nimport axios, { post } from 'axios';\\nimport Button from 'react-bootstrap/Button';\\n\\nclass SimpleReactFileUpload extends React.Component {\\n\\n    constructor(props) {\\n        super(props);\\n        this.state ={\\n            file:null,\\n            message: '',\\n            shouldShowFirst: false,\\n            shouldShowSecond: false\\n        }\\n        this.onFormSubmit = this.onFormSubmit.bind(this)\\n        this.onChange = this.onChange.bind(this)\\n        this.fileUpload = this.fileUpload.bind(this)\\n        this.firstProjectOnClick = this.firstProjectOnClick.bind(this)\\n        this.secondProjectOnClick = this.secondProjectOnClick.bind(this)\\n        this.onTextareaChange = this.onTextareaChange.bind(this)\\n        this.reviewUpload = this.reviewUpload.bind(this)\\n        this.onSecondFormSubmit = this.onSecondFormSubmit.bind(this)\\n    }\\n    onFormSubmit(e){\\n        console.log('Hi');\\n        e.preventDefault() // Stop form submit\\n        this.fileUpload(this.state.file).then((response)=>{\\n            // this.setState({\\n            //     message: 'Changed'\\n            // })\\n            console.log(response.data);\\n            // this.setState({\\n            //     message: response.data\\n            // })\\n            this.setState({\\n                message: response.data.label\\n            })\\n        })\\n    }\\n    onChange(e) {\\n        this.setState({file:e.target.files[0]})\\n    }\\n\\n    onSecondFormSubmit(e){\\n\\n        e.preventDefault() // Stop form submit\\n        this.reviewUpload(this.state.review).then((response)=>{\\n            // this.setState({\\n            //     message: 'Changed'\\n            // })\\n            console.log(response.data);\\n            // this.setState({\\n            //     message: response.data\\n            // })\\n            this.setState({\\n                prob: response.data.prob\\n            })\\n        })\\n    }\\n\\n    reviewUpload(review){\\n        const url = 'http://3.121.177.114:5000/second/predict';\\n        const formData = new FormData();\\n        formData.append('review',review)\\n        // const config = {\\n        //     headers: {\\n        //         'content-type': 'multipart/form-data'\\n        //     }\\n        // }\\n        return  post(url, formData)\\n    }\\n\\n    onTextareaChange(e) {\\n        // this.setState({file:e.target.files[0]})\\n        console.log(e.target.value)\\n        this.setState({\\n            review: e.target.value\\n        })\\n    }\\n\\n    firstProjectOnClick() {\\n        this.setState({\\n            shouldShowFirst: true,\\n            shouldShowSecond: false,\\n            review: \\\"\\\",\\n            prob: null\\n        })\\n    }\\n\\n    secondProjectOnClick() {\\n        this.setState({\\n            shouldShowFirst: false,\\n            shouldShowSecond: true,\\n            message: ''\\n        })\\n    }\\n\\n    fileUpload(file){\\n        const url = 'http://3.121.177.114:5000/first/predict';\\n        const formData = new FormData();\\n        formData.append('image',file)\\n        const config = {\\n            headers: {\\n                'content-type': 'multipart/form-data'\\n            }\\n        }\\n        return  post(url, formData,config)\\n    }\\n\\n    render() {\\n        return (\\n\\n            <div align=\\\"center\\\">\\n                <h1>DataRoot University Final Projects</h1>\\n                <br/>\\n                <br/>\\n                <Button variant=\\\"primary\\\" onClick={this.firstProjectOnClick}>First project</Button>\\n                <br/>\\n                <br/>\\n                <br/>\\n                <Button variant=\\\"primary\\\" onClick={this.secondProjectOnClick}>Second project</Button>\\n                <br/>\\n                <br/>\\n                {this.state.shouldShowFirst\\n                    ?\\n                    <div>\\n                        <form onSubmit={this.onFormSubmit}>\\n                            <h1>First Project: Sign Classification</h1>\\n                            <h4>This project is dedicated to classifying hand signs from 0 to 5</h4>\\n                            <h4>Take a photo of your palm showing sign from 0 to 5, upload the image and see the result of classification</h4>\\n                            <br/>\\n                            <h5>Note: background of your photo should be plain for the best performance of the model</h5>\\n                            <br/>\\n                            <input type=\\\"file\\\" onChange={this.onChange} />\\n                            <button type=\\\"submit\\\">Upload</button>\\n                        </form>\\n                        <br/>\\n                        <h5>You showed sign: {this.state.message}</h5>\\n                    </div>\\n                    :\\n                    null\\n                }\\n\\n                {this.state.shouldShowSecond\\n                    ?\\n                    <div>\\n                        <form onSubmit={this.onSecondFormSubmit}>\\n                            <h1>Second Project: Sentiment Analysis</h1>\\n                            <h4>This project is dedicated to classifying movie reviews</h4>\\n                            <h4>Write a review to a movie you recently watched and hit classify to see the result</h4>\\n                            <br/>\\n                            <h5>Note: you should use english</h5>\\n                            <br/>\\n                            <textarea rows={5} cols={65} onChange={this.onTextareaChange}></textarea>\\n                            <br/>\\n                            <button type=\\\"submit\\\">Classify</button>\\n                        </form>\\n                        <br/>\\n                        <p>Note: reviews that have similar good/bad probabilities might be neutral</p>\\n                        <h5>Your review is good with probability: {this.state.prob}</h5>\\n                        <h5>Your review is bad with probability: {1 - parseFloat(this.state.prob)}</h5>\\n                    </div>\\n                    :\\n                    null\\n                }\\n\\n            </div>\\n        )\\n    }\\n}\\n\\n\\n\\nexport default SimpleReactFileUpload\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport SimpleReactFileUpload from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport 'bootstrap/dist/css/bootstrap.css';\\n\\nReactDOM.render(<SimpleReactFileUpload />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{24:function(e,t,a){e.exports=a(56)},30:function(e,t,a){},56:function(e,t,a){\"use strict\";a.r(t);var n=a(0),o=a.n(n),l=a(18),r=a.n(l),i=(a(30),a(19)),c=a(20),s=a(22),u=a(21),h=a(2),m=a(23),d=a(5),b=a(6),p=a.n(b),f=function(e){function t(e){var a;return Object(i.a)(this,t),(a=Object(s.a)(this,Object(u.a)(t).call(this,e))).state={file:null,message:\"\",shouldShowFirst:!1,shouldShowSecond:!1},a.onFormSubmit=a.onFormSubmit.bind(Object(h.a)(a)),a.onChange=a.onChange.bind(Object(h.a)(a)),a.fileUpload=a.fileUpload.bind(Object(h.a)(a)),a.firstProjectOnClick=a.firstProjectOnClick.bind(Object(h.a)(a)),a.secondProjectOnClick=a.secondProjectOnClick.bind(Object(h.a)(a)),a.onTextareaChange=a.onTextareaChange.bind(Object(h.a)(a)),a.reviewUpload=a.reviewUpload.bind(Object(h.a)(a)),a.onSecondFormSubmit=a.onSecondFormSubmit.bind(Object(h.a)(a)),a}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"onFormSubmit\",value:function(e){var t=this;console.log(\"Hi\"),e.preventDefault(),this.fileUpload(this.state.file).then(function(e){console.log(e.data),t.setState({message:e.data.label})})}},{key:\"onChange\",value:function(e){this.setState({file:e.target.files[0]})}},{key:\"onSecondFormSubmit\",value:function(e){var t=this;e.preventDefault(),this.reviewUpload(this.state.review).then(function(e){console.log(e.data),t.setState({prob:e.data.prob})})}},{key:\"reviewUpload\",value:function(e){var t=new FormData;return t.append(\"review\",e),Object(d.post)(\"http://3.121.177.114:5000/second/predict\",t)}},{key:\"onTextareaChange\",value:function(e){console.log(e.target.value),this.setState({review:e.target.value})}},{key:\"firstProjectOnClick\",value:function(){this.setState({shouldShowFirst:!0,shouldShowSecond:!1,review:\"\",prob:null})}},{key:\"secondProjectOnClick\",value:function(){this.setState({shouldShowFirst:!1,shouldShowSecond:!0,message:\"\"})}},{key:\"fileUpload\",value:function(e){var t=new FormData;t.append(\"image\",e);return Object(d.post)(\"http://3.121.177.114:5000/first/predict\",t,{headers:{\"content-type\":\"multipart/form-data\"}})}},{key:\"render\",value:function(){return o.a.createElement(\"div\",{align:\"center\"},o.a.createElement(\"h1\",null,\"DataRoot University Final Projects\"),o.a.createElement(\"br\",null),o.a.createElement(\"br\",null),o.a.createElement(p.a,{variant:\"primary\",onClick:this.firstProjectOnClick},\"First project\"),o.a.createElement(\"br\",null),o.a.createElement(\"br\",null),o.a.createElement(\"br\",null),o.a.createElement(p.a,{variant:\"primary\",onClick:this.secondProjectOnClick},\"Second project\"),o.a.createElement(\"br\",null),o.a.createElement(\"br\",null),this.state.shouldShowFirst?o.a.createElement(\"div\",null,o.a.createElement(\"form\",{onSubmit:this.onFormSubmit},o.a.createElement(\"h1\",null,\"First Project: Sign Classification\"),o.a.createElement(\"h4\",null,\"This project is dedicated to classifying hand signs from 0 to 5\"),o.a.createElement(\"h4\",null,\"Take a photo of your palm showing sign from 0 to 5, upload the image and see the result of classification\"),o.a.createElement(\"br\",null),o.a.createElement(\"h5\",null,\"Note: background of your photo should be plain for the best performance of the model\"),o.a.createElement(\"br\",null),o.a.createElement(\"input\",{type:\"file\",onChange:this.onChange}),o.a.createElement(\"button\",{type:\"submit\"},\"Upload\")),o.a.createElement(\"br\",null),o.a.createElement(\"h5\",null,\"You showed sign: \",this.state.message)):null,this.state.shouldShowSecond?o.a.createElement(\"div\",null,o.a.createElement(\"form\",{onSubmit:this.onSecondFormSubmit},o.a.createElement(\"h1\",null,\"Second Project: Sentiment Analysis\"),o.a.createElement(\"h4\",null,\"This project is dedicated to classifying movie reviews\"),o.a.createElement(\"h4\",null,\"Write a review to a movie you recently watched and hit classify to see the result\"),o.a.createElement(\"br\",null),o.a.createElement(\"h5\",null,\"Note: you should use english\"),o.a.createElement(\"br\",null),o.a.createElement(\"textarea\",{rows:5,cols:65,onChange:this.onTextareaChange}),o.a.createElement(\"br\",null),o.a.createElement(\"button\",{type:\"submit\"},\"Classify\")),o.a.createElement(\"br\",null),o.a.createElement(\"p\",null,\"Note: reviews that have similar good/bad probabilities might be neutral\"),o.a.createElement(\"h5\",null,\"Your review is good with probability: \",this.state.prob),o.a.createElement(\"h5\",null,\"Your review is bad with probability: \",1-parseFloat(this.state.prob))):null)}}]),t}(o.a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a(55);r.a.render(o.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[24,1,2]]]);","extractedComments":[]}